import React, { useState } from 'react';
import { Helmet } from 'react-helmet';
import { Button } from '@/components/ui/button';
import { Card, CardContent } from '@/components/ui/card';
import { Calendar, Utensils, Download } from 'lucide-react';
import { motion } from 'framer-motion';
import axios from 'axios';
import { auth } from '../firebase';

const MealCard = ({ day, meals, delay }) => (
    <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.5, delay }}
    >
        <Card className="glassmorphism rounded-2xl h-full">
            <CardContent className="p-6">
                <h3 className="font-bold text-xl mb-4 text-primary">{day}</h3>
                <ul className="space-y-2 text-muted-foreground">
                    {meals.map((meal, index) => (
                        <li key={index} className="flex items-start gap-2">
                           <Utensils className="h-4 w-4 mt-1 text-primary/70 shrink-0" />
                           <span><span className="font-semibold text-foreground">{meal.time}:</span> {meal.dish}</span>
                        </li>
                    ))}
                </ul>
            </CardContent>
        </Card>
    </motion.div>
);

const MealPlannerPage = () => {
  const [symptoms, setSymptoms] = useState('');
  const [weeklyPlan, setWeeklyPlan] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [plainTextPlan, setPlainTextPlan] = useState('');
  const [fullJsonPlan, setFullJsonPlan] = useState(null);

  const generateMealPlan = async () => {
    if (!symptoms.trim()) {
      setError('Please enter symptoms');
      return;
    }
    const user = auth.currentUser;
    if (!user) {
      setError('You must be logged in to generate a meal plan.');
      return;
    }
    setLoading(true);
    setError(null);
    try {
      const response = await axios.post('/api/mealplanner/generate', { symptoms, userId: user.uid });
      const plan = response.data.mealPlan.weeklyPlan;
      setWeeklyPlan(plan);
      setPlainTextPlan(convertPlanToText(symptoms, plan));
      setFullJsonPlan(response.data.fullMealPlan);
    } catch (err) {
      setError(err.response?.data?.message || 'Failed to generate meal plan');
      setPlainTextPlan('');
      setFullJsonPlan(null);
    } finally {
      setLoading(false);
    }
  };

  // Convert structured plan to plain text format
  const convertPlanToText = (symptoms, plan) => {
    if (!plan || plan.length === 0) return '';
    let text = `Symptoms: ${symptoms}\n`;
    plan.forEach(dayPlan => {
      text += `${dayPlan.day}:\n`;
      dayPlan.meals.forEach(meal => {
        text += `${meal.time}: ${meal.dish}\n`;
      });
      text += '\n';
    });
    return text.trim();
  };

  return (
    <>
      <Helmet>
        <title>AI Meal Planner - SwasthAI</title>
        <meta name="description" content="Get a personalized weekly meal plan generated by AI, based on your dietary restrictions and health goals." />
      </Helmet>
      <div className="main-container">
        <div className="text-center">
            <h1 className="page-title">AI-Powered Meal Planner</h1>
            <p className="page-description">Your weekly menu, sorted. Our AI creates balanced and delicious meal plans tailored just for you. More features are coming soon!</p>
        </div>

        <div className="mb-4">
          <input
            type="text"
            placeholder="Enter your symptoms or health conditions"
            value={symptoms}
            onChange={(e) => setSymptoms(e.target.value)}
            className="w-full p-3 rounded-lg border border-gray-300 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition duration-200 placeholder-gray-400 text-gray-900 font-semibold"
            disabled={loading}
          />
        </div>

<motion.div 
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.5 }}
            className="flex justify-center gap-4 mb-8"
        >
            <Button size="lg" onClick={generateMealPlan} disabled={loading}>
              <Calendar className="mr-2 h-5 w-5" /> 
              {loading ? 'Generating...' : "Generate This Week's Plan"}
            </Button>
            
        </motion.div>

        {error && <p className="text-red-600 mb-4">{error}</p>}

        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {weeklyPlan.length > 0 ? (
            weeklyPlan.map((dayPlan, index) => (
              <MealCard key={dayPlan.day} day={dayPlan.day} meals={dayPlan.meals} delay={index * 0.1} />
            ))
          ) : (
            <p className="text-center text-muted-foreground">No meal plan generated yet.</p>
          )}
        </div>

        {/* Removed plainTextPlan rendering to avoid duplicate output */}
        {/*
        {plainTextPlan && (
          <div className="mt-6 p-4 bg-white rounded-lg whitespace-pre-wrap font-mono text-sm text-black">
            {plainTextPlan}
          </div>
        )}
        */}

        {fullJsonPlan && (
          <div className="mt-6 p-4 bg-gray-50 rounded-lg overflow-auto max-h-96 font-mono text-xs">
            <pre>{JSON.stringify(fullJsonPlan, null, 2)}</pre>
          </div>
        )}
      </div>
    </>
  );
};



export default MealPlannerPage;